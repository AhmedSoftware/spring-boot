plugins {
	id "org.springframework.boot.conventions"
	id "org.springframework.boot.deployed"
	id "org.springframework.boot.maven-repository"
	//id 'java'
}

dependencies {
	//implementation 
    mavenRepository "${project.group}:spring-boot-dependencies:${project.version}@pom";
}

description = "Parent pom providing dependency and plugin management for applications built with Maven"

publishing.publications.withType(MavenPublication) {
//https://docs.gradle.org/current/javadoc/org/gradle/api/artifacts/Configuration.html
	project.configurations.each {
    println it.name;
}
    def parentPom = project.configurations.getByName("mavenRepository").getIncoming().getFiles().getFiles().find{it.name.endsWith('.pom')}
	println "${parentPom}"
	def parentPomXml = new XmlSlurper(false,false).parse(parentPom)
	def propsMap = [:]
	parentPomXml.properties.children ().each {
		def verName =it.name()
		def verVal = it.text()
		propsMap.put(verName, verVal);
	}
	def pluginVerMap = [:]
	def pluginMap = [:]
	def verPattern = ~/[$][{]([^}]+)[}]/
	parentPomXml.build.pluginManagement.plugins.children().each {
		def artifactId = it.artifactId
		pluginMap.put(artifactId.text(), it)
		println it
		def pVer = it.version //${xx}
		if (!pVer) {
			return;
		}
		def matcher = verPattern.matcher(pVer.text())
		pVer = matcher.matches() ? matcher.group(1): null
		def pv = pVer ? propsMap[pVer] : null
		if(pv) {
			pluginVerMap.put(pVer, pv)
		}
	}
	def addPluginVer = {node, artifactId1 -> 
		def pluginNode = pluginMap.remove(artifactId1);
		if (!pluginNode) {
			return
		}
		def pVer = pluginNode.version.text()
		println "$artifactId1 => $pVer"
		if (pVer) {
			node.'version'(pVer)
		}
	} //end addPluginVer
	def addParentPlugins = {node -> 
		pluginMap.each {artifactId, pluginNode ->
			node.plugin {
				def pluginDelegate = delegate
				pluginNode.children().each {
					pluginDelegate."${it.name()}"(it.text())
				}
			}
		}
	} //end addParentPlugins
	pom.withXml { xml ->
		def root = xml.asNode()
		//root.dependencies.replaceNode {}
		root.description.plus {
			properties {
				delegate."java.version"('1.8')
				delegate."resource.delimiter"('@')
				delegate."maven.compiler.source"('${java.version}')
				delegate."maven.compiler.target"('${java.version}')
				delegate."project.build.sourceEncoding"('UTF-8')
				delegate."project.reporting.outputEncoding"('UTF-8')
				delegate."spring-boot.version"("${project.version}")
				def propsNode = delegate;
				pluginVerMap.each {prop,propVal ->
					propsNode."$prop"(propVal)
				}
			}
		}
		root.scm.plus {
			dependencyManagement {
				delegate.dependencies {
					delegate.dependency {
						delegate.groupId('org.springframework.boot')
						delegate.artifactId('spring-boot-dependencies')
						delegate.version('${spring-boot.version}')
						delegate.type('pom')
						delegate.scope('import')
					}
				}
			}
			build {
				resources {
					resource {
						delegate.directory('${basedir}/src/main/resources')
						delegate.filtering('true')
						includes {
							delegate.include('**/application*.yml')
							delegate.include('**/application*.yaml')
							delegate.include('**/application*.properties')
						}
					}
					resource {
						delegate.directory('${basedir}/src/main/resources')
						excludes {
							delegate.exclude('**/application*.yml')
							delegate.exclude('**/application*.yaml')
							delegate.exclude('**/application*.properties')
						}
					}
				}
				pluginManagement {
					plugins {
						plugin {
							delegate.groupId('org.jetbrains.kotlin')
							delegate.artifactId('kotlin-maven-plugin')
							pluginMap.remove('kotlin-maven-plugin')
							delegate.version('${kotlin.version}')
							configuration {
								delegate.jvmTarget('${java.version}')
								delegate.javaParameters('true')
							}
							executions {
								execution {
									delegate.id('compile')
									delegate.phase('compile')
									goals {
										delegate.goal('compile')
									}
								}
								execution {
									delegate.id('test-compile')
									delegate.phase('test-compile')
									goals {
										delegate.goal('test-compile')
									}
								}
							}
						}
						plugin {
							delegate.groupId('org.apache.maven.plugins')
							delegate.artifactId('maven-compiler-plugin')
							addPluginVer(delegate, 'maven-compiler-plugin')
							configuration {
								delegate.parameters('true')
							}
						}
						plugin {
							delegate.groupId('org.apache.maven.plugins')
							delegate.artifactId('maven-failsafe-plugin')
							addPluginVer(delegate, 'maven-failsafe-plugin')
							executions {
								execution {
									goals {
										delegate.goal('integration-test')
										delegate.goal('verify')
									}
								}
							}
							configuration {
								delegate.classesDirectory('${project.build.outputDirectory}')
							}
						}
						plugin {
							delegate.groupId('org.apache.maven.plugins')
							delegate.artifactId('maven-jar-plugin')
							addPluginVer(delegate, 'maven-jar-plugin')
							configuration {
								archive {
									manifest {
										delegate.mainClass('${start-class}')
										delegate.addDefaultImplementationEntries('true')
									}
								}
							}
						}
						plugin {
							delegate.groupId('org.apache.maven.plugins')
							delegate.artifactId('maven-war-plugin')
							addPluginVer(delegate, 'maven-war-plugin')
							configuration {
								archive {
									manifest {
										delegate.mainClass('${start-class}')
										delegate.addDefaultImplementationEntries('true')
									}
								}
							}
						}
						plugin {
							delegate.groupId('org.apache.maven.plugins')
							delegate.artifactId('maven-resources-plugin')
							addPluginVer(delegate, 'maven-resources-plugin')
							configuration {
								delegate.propertiesEncoding('${project.build.sourceEncoding}')
								delimiters {
									delegate.delimiter('${resource.delimiter}')
								}
								delegate.useDefaultDelimiters('false')
							}
						}
						plugin {
							delegate.groupId('pl.project13.maven')
							delegate.artifactId('git-commit-id-plugin')
							addPluginVer(delegate, 'git-commit-id-plugin')
							executions {
								execution {
									goals {
										delegate.goal('revision')
									}
								}
							}
							configuration {
								delegate.verbose('true')
								delegate.dateFormat("yyyy-MM-dd'T'HH:mm:ssZ")
								delegate.generateGitPropertiesFile('true')
								delegate.generateGitPropertiesFilename('${project.build.outputDirectory}/git.properties')
							}
						}
						plugin {
							delegate.groupId('org.springframework.boot')
							delegate.artifactId('spring-boot-maven-plugin')
                            pluginMap.remove('spring-boot-maven-plugin')
							delegate.version('${spring-boot.version}')
							executions {
								execution {
									delegate.id('repackage')
									goals {
										delegate.goal('repackage')
									}
								}
							}
							configuration {
								delegate.mainClass('${start-class}')
							}
						}
						plugin {
							delegate.groupId('org.apache.maven.plugins')
							delegate.artifactId('maven-shade-plugin')
							addPluginVer(delegate, 'maven-shade-plugin')
							configuration {
								delegate.keepDependenciesWithProvidedScope('true')
								delegate.createDependencyReducedPom('true')
								filters {
									filter {
										delegate.artifact('*:*')
										excludes {
											delegate.exclude('META-INF/*.SF')
											delegate.exclude('META-INF/*.DSA')
											delegate.exclude('META-INF/*.RSA')
										}
									}
								}
							}
							delegate.dependencies {
								dependency {
									delegate.groupId('org.springframework.boot')
									delegate.artifactId('spring-boot-maven-plugin')
									delegate.version('${spring-boot.version}')
								}
							}
							executions {
								execution {
									delegate.phase('package')
									goals {
										delegate.goal('shade')
									}
									configuration {
										transformers {
											transformer(implementation: 'org.apache.maven.plugins.shade.resource.AppendingTransformer') {
												delegate.resource('META-INF/spring.handlers')
											}
											transformer(implementation: 'org.springframework.boot.maven.PropertiesMergingResourceTransformer') {
												delegate.resource('META-INF/spring.factories')
											}
											transformer(implementation: 'org.apache.maven.plugins.shade.resource.AppendingTransformer') {
												delegate.resource('META-INF/spring.schemas')
											}
											transformer(implementation: 'org.apache.maven.plugins.shade.resource.ServicesResourceTransformer')
											transformer(implementation: 'org.apache.maven.plugins.shade.resource.ManifestResourceTransformer') {
												delegate.mainClass('${start-class}')
											}
										}
									}
								}
							}
						}
						addParentPlugins(delegate);
					} // end plugins
				}
			}
		}
	}
}
