/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.boot.autoconfigure.jms.activemq;

import java.time.Duration;
import java.util.ArrayList;
import java.util.List;

import org.springframework.boot.autoconfigure.jms.JmsPoolConnectionFactoryProperties;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.NestedConfigurationProperty;

/**
 * Configuration properties for ActiveMQ.
 *
 * @author Greg Turnquist
 * @author Stephane Nicoll
 * @author Aurélien Leboulanger
 * @author Venil Noronha
 * @author Eddú Meléndez
 * @since 3.1.0
 */
@ConfigurationProperties(prefix = "spring.activemq")
public class ActiveMQProperties {

	private static final String DEFAULT_NETWORK_BROKER_URL = "tcp://localhost:61616";

	/**
	 * URL of the ActiveMQ broker. Auto-generated by default.
	 */
	private String brokerUrl;

	/**
	 * Login user of the broker.
	 */
	private String user;

	/**
	 * Login password of the broker.
	 */
	private String password;

	/**
	 * Time to wait before considering a close complete.
	 */
	private Duration closeTimeout = Duration.ofSeconds(15);

	/**
	 * Whether to stop message delivery before re-delivering messages from a rolled back
	 * transaction. This implies that message order is not preserved when this is enabled.
	 */
	private boolean nonBlockingRedelivery = false;

	/**
	 * Time to wait on message sends for a response. Set it to 0 to wait forever.
	 */
	private Duration sendTimeout = Duration.ofMillis(0);

	@NestedConfigurationProperty
	private final JmsPoolConnectionFactoryProperties pool = new JmsPoolConnectionFactoryProperties();

	private final Packages packages = new Packages();

	/**
     * Returns the broker URL.
     *
     * @return the broker URL
     */
    public String getBrokerUrl() {
		return this.brokerUrl;
	}

	/**
     * Sets the broker URL for connecting to the ActiveMQ broker.
     * 
     * @param brokerUrl the broker URL to set
     */
    public void setBrokerUrl(String brokerUrl) {
		this.brokerUrl = brokerUrl;
	}

	/**
     * Returns the user associated with the ActiveMQProperties object.
     *
     * @return the user associated with the ActiveMQProperties object
     */
    public String getUser() {
		return this.user;
	}

	/**
     * Sets the user for the ActiveMQ connection.
     * 
     * @param user the user to set
     */
    public void setUser(String user) {
		this.user = user;
	}

	/**
     * Returns the password associated with the ActiveMQProperties object.
     *
     * @return the password
     */
    public String getPassword() {
		return this.password;
	}

	/**
     * Sets the password for the ActiveMQ connection.
     * 
     * @param password the password to be set
     */
    public void setPassword(String password) {
		this.password = password;
	}

	/**
     * Returns the close timeout duration.
     *
     * @return the close timeout duration
     */
    public Duration getCloseTimeout() {
		return this.closeTimeout;
	}

	/**
     * Sets the close timeout for the ActiveMQProperties.
     * 
     * @param closeTimeout the close timeout duration to be set
     */
    public void setCloseTimeout(Duration closeTimeout) {
		this.closeTimeout = closeTimeout;
	}

	/**
     * Returns a boolean value indicating whether non-blocking redelivery is enabled.
     *
     * @return true if non-blocking redelivery is enabled, false otherwise
     */
    public boolean isNonBlockingRedelivery() {
		return this.nonBlockingRedelivery;
	}

	/**
     * Sets the flag indicating whether non-blocking redelivery is enabled or not.
     * 
     * @param nonBlockingRedelivery the flag indicating whether non-blocking redelivery is enabled or not
     */
    public void setNonBlockingRedelivery(boolean nonBlockingRedelivery) {
		this.nonBlockingRedelivery = nonBlockingRedelivery;
	}

	/**
     * Returns the send timeout duration.
     *
     * @return the send timeout duration
     */
    public Duration getSendTimeout() {
		return this.sendTimeout;
	}

	/**
     * Sets the send timeout for the ActiveMQProperties.
     * 
     * @param sendTimeout the send timeout duration to be set
     */
    public void setSendTimeout(Duration sendTimeout) {
		this.sendTimeout = sendTimeout;
	}

	/**
     * Returns the JmsPoolConnectionFactoryProperties object representing the connection pool configuration.
     *
     * @return the JmsPoolConnectionFactoryProperties object representing the connection pool configuration
     */
    public JmsPoolConnectionFactoryProperties getPool() {
		return this.pool;
	}

	/**
     * Returns the packages associated with the ActiveMQProperties.
     * 
     * @return the packages associated with the ActiveMQProperties
     */
    public Packages getPackages() {
		return this.packages;
	}

	/**
     * Returns the broker URL for the ActiveMQ connection.
     * If the broker URL is not null, it is returned.
     * Otherwise, the default network broker URL is returned.
     *
     * @return the broker URL for the ActiveMQ connection
     */
    String determineBrokerUrl() {
		if (this.brokerUrl != null) {
			return this.brokerUrl;
		}
		return DEFAULT_NETWORK_BROKER_URL;
	}

	/**
     * Packages class.
     */
    public static class Packages {

		/**
		 * Whether to trust all packages.
		 */
		private Boolean trustAll;

		/**
		 * Comma-separated list of specific packages to trust (when not trusting all
		 * packages).
		 */
		private List<String> trusted = new ArrayList<>();

		/**
         * Returns the value of the trustAll property.
         * 
         * @return true if trustAll is enabled, false otherwise
         */
        public Boolean getTrustAll() {
			return this.trustAll;
		}

		/**
         * Sets the trustAll flag.
         * 
         * @param trustAll the trustAll flag to be set
         */
        public void setTrustAll(Boolean trustAll) {
			this.trustAll = trustAll;
		}

		/**
         * Returns the list of trusted entities.
         *
         * @return the list of trusted entities
         */
        public List<String> getTrusted() {
			return this.trusted;
		}

		/**
         * Sets the list of trusted packages.
         * 
         * @param trusted the list of trusted packages
         */
        public void setTrusted(List<String> trusted) {
			this.trusted = trusted;
		}

	}

}
